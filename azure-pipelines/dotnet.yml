steps:

- script: dotnet build --no-restore -c $(BuildConfiguration) /v:m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/build.binlog"
  displayName: dotnet build

- script: dotnet pack --no-build -c $(BuildConfiguration) /v:m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/pack.binlog"
  displayName: dotnet pack

- task: DotNetCoreCLI@2
  displayName: dotnet test -f net46 (w/ coverage)
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) -f net46 --filter "TestCategory!=FailsInCloudTest & TestCategory!=FailsWhileInstrumented" -v n /p:CollectCoverage=true
    testRunTitle: net46-$(Agent.JobName)
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: DotNetCoreCLI@2
  displayName: dotnet test -f net46 (w/o coverage)
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) -f net46 --filter "TestCategory!=FailsInCloudTest & TestCategory=FailsWhileInstrumented" -v n
    testRunTitle: net46-$(Agent.JobName)-nocoverage
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: DotNetCoreCLI@2
  displayName: dotnet test -f netcoreapp2.1
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) -f netcoreapp2.1 --filter "TestCategory!=FailsInCloudTest" -v n /p:CollectCoverage=true
    testRunTitle: netcoreapp2.1-$(Agent.JobName)

- task: PowerShell@2
  inputs:
    filePath: azure-pipelines/artifacts/_pipelines.ps1
    arguments: -ArtifactNameSuffix "-$(Agent.JobName)"
  displayName: Publish artifacts
  condition: succeededOrFailed()

- bash: bash <(curl -s https://codecov.io/bash)
  displayName: Publish code coverage results to codecov.io
  timeoutInMinutes: 3
  continueOnError: true
